Available issues:

OCLint
======

use early exits and continue
----------

Summary: Early exits can reduce the indentation of a block of code, so that reader do not have to remember all the previous decisions, therefore, makes it easier to understand the code.

Severity: 2
Category: OCLint

avoid branching statement as last in loop
----------

Summary: Having branching statement as the last statement inside a loop is very confusing, and could largely be forgetting of something and turning into a bug.

Severity: 2
Category: OCLint

bitwise operator in conditional
----------

Summary: Checks for bitwise operations in conditionals. Although being written on purpose in some rare cases, bitwise operations are considered to be too ?smart?. Smart code is not easy to understand.

Severity: 3
Category: OCLint

broken null check
----------

Summary: The broken null check itself will crash the program.

Severity: 3
Category: OCLint

broken nil check
----------

Summary: 

Severity: 4
Category: OCLint

broken oddness check
----------

Summary: Checking oddness by x%2==1 won?t work for negative numbers. Use x&1==1, or x%2!=0 instead.

Severity: 3
Category: OCLint

collapsible if statements
----------

Summary: This rule detects instances where the conditions of two consecutive if statements can be combined into one in order to increase code cleanness and readability.

Severity: 3
Category: OCLint

constant conditional operator
----------

Summary: conditionaloperator whose conditionals are always true or always false are confusing.

Severity: 3
Category: OCLint

constant if expression
----------

Summary: if statements whose conditionals are always true or always false are confusing.

Severity: 3
Category: OCLint

high cyclomatic complexity
----------

Summary: 

Severity: 2
Category: OCLint

dead code
----------

Summary: Code after return, break, continue, and throw statements is unreachable and will never be executed.

Severity: 3
Category: OCLint

default label not last in switch statement
----------

Summary: It is very confusing when default label is not the last label in a switch statement.

Severity: 2
Category: OCLint

double negative
----------

Summary: There is no point in using a double negative, it is always positive.

Severity: 3
Category: OCLint

empty catch statement
----------

Summary: This rule detects instances where an exception is caught, but nothing is done about it.

Severity: 3
Category: OCLint

empty do/while statement
----------

Summary: This rule detects instances where do-while statement does nothing.

Severity: 3
Category: OCLint

empty else block
----------

Summary: This rule detects instances where a else statement does nothing.

Severity: 3
Category: OCLint

empty finally statement
----------

Summary: This rule detects instances where a finally statement does nothing.

Severity: 3
Category: OCLint

empty for statement
----------

Summary: This rule detects instances where a for statement does nothing.

Severity: 3
Category: OCLint

empty if statement
----------

Summary: This rule detects instances where a condition is checked, but nothing is done about it.

Severity: 3
Category: OCLint

empty switch statement
----------

Summary: This rule detects instances where a switch statement does nothing.

Severity: 3
Category: OCLint

empty try statement
----------

Summary: This rule detects instances where a try statement is empty.

Severity: 3
Category: OCLint

empty while statement
----------

Summary: 

Severity: 3
Category: OCLint

feature envy
----------

Summary: 

Severity: 3
Category: OCLint

for loop should be while loop
----------

Summary: Under certain circumstances, some for loops can be simplified to while loops to make code more concise.

Severity: 3
Category: OCLint

goto statement
----------

Summary: 

Severity: 3
Category: OCLint

inverted logic
----------

Summary: An inverted logic is hard to understand.

Severity: 2
Category: OCLint

jumbled incrementer
----------

Summary: Jumbled incrementers are usually typos. If it?s done on purpose, it?s very confusing for code readers.

Severity: 3
Category: OCLint

long class
----------

Summary: Long class generally indicates that this class tries to do many things. Each class should do one thing and that one thing well.

Severity: 3
Category: OCLint

long line
----------

Summary: When the number of characters for one line of code is very high, it largely harms the readability. Break long lines of code into multiple lines.

Severity: 3
Category: OCLint

long method
----------

Summary: Long method generally indicates that this method tries to do many things. Each method should do one thing and that one thing well.

Severity: 3
Category: OCLint

long variable name
----------

Summary: Variables with long names harm readability.

Severity: 2
Category: OCLint

misplaced null check
----------

Summary: The null check is misplaced. In C and C++, sending a message to a null pointer could crash the app. When null is misplaced, either the check is useless or it?s incorrect.

Severity: 3
Category: OCLint

misplaced nil check
----------

Summary: 

Severity: 4
Category: OCLint

missing break in switch statement
----------

Summary: A switch statement without a break statement has a very large chance to contribute a bug.

Severity: 2
Category: OCLint

multiple unary operator
----------

Summary: Multiple unary operator can always be confusing and should be simplified.

Severity: 3
Category: OCLint

must override hash with isEqual
----------

Summary: 

Severity: 1
Category: OCLint

high ncss method
----------

Summary: This rule counts number of lines for a method by counting Non Commenting Source Statements (NCSS). NCSS only takes actual statements into consideration, in other words, ignores empty statements, empty blocks, closing brackets or semicolons after closing brackets. Meanwhile, a statement that is broken into multiple lines contribute only one count.

Severity: 3
Category: OCLint

deep nested block
----------

Summary: This rule indicates blocks nested more deeply than the upper limit.

Severity: 3
Category: OCLint

non case label in switch statement
----------

Summary: It is very confusing when label becomes part of the switch statement.

Severity: 2
Category: OCLint

high npath complexity
----------

Summary: 

Severity: 2
Category: OCLint

replace with boxed expression
----------

Summary: This rule locates the places that can be migrated to the new Objective-C literals with boxed expressions.

Severity: 1
Category: OCLint

replace with container literal
----------

Summary: This rule locates the places that can be migrated to the new Objective-C literals with container literals.

Severity: 1
Category: OCLint

replace with number literal
----------

Summary: This rule locates the places that can be migrated to the new Objective-C literals with number literals.

Severity: 1
Category: OCLint

replace with object subscripting
----------

Summary: 

Severity: 1
Category: OCLint

parameter reassignment
----------

Summary: Reassigning values to parameters is very problematic in most cases.

Severity: 2
Category: OCLint

redundant conditional operator
----------

Summary: This rule detects three types of redundant conditional operators:

Severity: 1
Category: OCLint

redundant if statement
----------

Summary: This rule detects unnecessary if statements.

Severity: 1
Category: OCLint

redundant local variable
----------

Summary: This rule detects cases where a variable declaration is immediately followed by a return of that variable.

Severity: 1
Category: OCLint

redundant nil check
----------

Summary: C/C++-style null check in Objective-C like foo!=nil&&[foobar] is redundant, since sending a message to a nil object in this case simply returns a false-y value.

Severity: 1
Category: OCLint

return from finally block
----------

Summary: Returning from a finally block is not recommended.

Severity: 3
Category: OCLint

short variable name
----------

Summary: 

Severity: 2
Category: OCLint

switch statements don't need default when fully covered
----------

Summary: 

Severity: 3
Category: OCLint

switch statements should have default
----------

Summary: Switch statements should have a default statement.

Severity: 2
Category: OCLint

throw exception from finally block
----------

Summary: 

Severity: 3
Category: OCLint

too few branches in switch statement
----------

Summary: 

Severity: 2
Category: OCLint

too many fields
----------

Summary: A class with too many fields indicates it does too many things and lacks proper abstraction. It can be redesigned to have fewer fields.

Severity: 3
Category: OCLint

too many methods
----------

Summary: A class with too many methods indicates it does too many things and is hard to read and understand. It usually contains complicated code, and should be refactored.

Severity: 3
Category: OCLint

too many parameters
----------

Summary: 

Severity: 3
Category: OCLint

unnecessary else statement
----------

Summary: When an if statement block ends with a return statement, or all branches in the if statement block end with return statements, then the else statement is unnecessary. The code in the else statement can be run without being in the block.

Severity: 1
Category: OCLint

unused local variable
----------

Summary: This rule detects local variables that are declared, but not used.

Severity: 0
Category: OCLint

unused method parameter
----------

Summary: 

Severity: 0
Category: OCLint

useless parentheses
----------

Summary: 

Severity: 1
Category: OCLint

ivar assignment outside accessors or init
----------

Summary: This rule prevents assigning an ivar outside of getters, setters, and init method.

Severity: 2
Category: OCLint

covered switch statements dont need default
----------

Summary: When a switch statement covers all possible cases, a default label is not needed and should be removed. If the switch is not fully covered, the SwitchStatementsShouldHaveDefault rule will report.

Severity: 2
Category: OCLint

class 
----------

Summary: This rule enforces the destructor of a virtual class must be virtual.

Severity: 2
Category: OCLint

unnecessary null check for dealloc
----------

Summary: char*p=0;deletep; is valid. This rule locates unnecessary if(p) checks.

Severity: 1
Category: OCLint

